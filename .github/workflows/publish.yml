# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Publish


# TODO: inspect ${{ github.tag_name }} if it is of form 'refs/tags/x.y.z' 
# in which case x.y.z should be used as the version to publish

on:
  release:
    types: [created]
  push:
    branches:
    - main

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo sudo apt-get install redis-tools netcat
        python -m pip install --upgrade pip
        pip install packaging setuptools wheel twine
    
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        echo "::set-output name=old_version::$(python publish.py --current-version)"
        python publish.py -y
        echo "::set-output name=new_version::$(python publish.py --current-version)"
      id: publish


    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: version ${{ steps.publish.new_version }}
        file_pattern: setup.cfg
          
    - name: Create Docker image
      run: |
        docker run --rm --name redisgears -p 127.0.0.1:6379:6379 -d redislabs/redisgears:latest
        while ! nc -z localhost 6379; do sleep 0.1 ; done
        redis-cli RG.PYEXECUTE "" REQUIREMENTS redgrease[runtime]==${{ steps.publish.new_version }}
        docker commit -a "Lyngon Pte. Ltd. <info@lyngon.com>" -m "Redis Gears with redgrease ${{ steps.publish.new_version }}" redisgears lyngon/redgrease:${{ steps.publish.new_version }}

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image to DockerHub
      run: |
        docker push lyngon/redgrease:${{ steps.publish.new_version }}
        docker tag lyngon/redgrease:${{ steps.publish.new_version }} lyngon/redgrease:latest
        docker push lyngon/redgrease:latest
